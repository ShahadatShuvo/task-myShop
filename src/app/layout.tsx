"use client";

import "./globals.css";
import { Inter } from "next/font/google";
import { AllContext } from "./context";
import React, { useState } from "react";

const inter = Inter({ subsets: ["latin"] });

const metadata = {
  title: "Create Next App",
  description: "Generated by create next app",
};

interface AllProductsInterface {
  id: number | string;
  brand: string;
  category: string;
  description: string;
  discountPercentage: number;
  images: string[];
  price: number;
  rating: number;
  stock: number;
  thumbnail: string;
  qty: number;
  title: string;
}

export default function RootLayout({
  children,
}: {
  children: React.ReactNode;
}) {
  const [allProducts, setAllProducts] = useState<any>([]);
  const [isLightTheme, setIsLightTheme] = useState<boolean>(true);
  const [check, setCheck] = useState(false);

  React.useEffect(() => {
    // const check = JSON.parse(localStorage.getItem("check") || "true");

    if (allProducts.length > 0) {
      localStorage.setItem("cart", JSON.stringify(allProducts));
    } else {
      const cartData = JSON.parse(localStorage.getItem("cart") || "[]");
      if (cartData.length === 1 && check === true) {
        localStorage.removeItem("cart");
      }
    }
  }, [allProducts, check]);

  React.useEffect(() => {
    const cartData = localStorage.getItem("cart");
    if (cartData) {
      try {
        const parsedData = JSON.parse(cartData);
        setAllProducts(parsedData);
      } catch (error) {
        console.error("Error parsing JSON:", error);
      }
    }
  }, []);

  const toggleTheme = () => {
    setIsLightTheme((prevTheme: boolean) => !prevTheme);
  };

  const increaseCartValue = (newValue: AllProductsInterface) => {
    console.log("newValue qty", newValue.qty);
    setAllProducts((prevState: AllProductsInterface[] | any) => {
      const isExist = prevState.find(
        (item: AllProductsInterface) => item.id === newValue.id
      );
      if (isExist) {
        return prevState.map((item: AllProductsInterface) => {
          if (item.id === newValue.id) {
            return {
              ...item,
              qty: newValue.qty ? newValue.qty + 1 : item.qty + 1,
            };
          }
          return item;
        });
      }
      if (newValue.qty) {
        return [...prevState, { ...newValue, qty: newValue.qty + 1 }];
      }
      return [...prevState, { ...newValue, qty: 1 }];
    });
  };
  const decreaseCartValue = (newValue: AllProductsInterface) => {
    setAllProducts((prevState: AllProductsInterface[] | any) => {
      const isExist = prevState.find(
        (item: AllProductsInterface) => item.id === newValue.id
      );
      if (isExist) {
        return prevState.map((item: AllProductsInterface) => {
          if (item.id === newValue.id) {
            if (item.qty > 1) {
              return {
                ...item,
                qty: item.qty - 1,
              };
            } else {
              return {
                ...item,
                qty: 1,
              };
            }
          }
          return item;
        });
      }
      return [...prevState, { ...newValue, qty: 1 }];
    });
  };

  const deleteCartValue = (newValue: AllProductsInterface) => {
    setAllProducts((prevState: any) => {
      // Search for the index of the product to delete
      const index = prevState.findIndex(
        (product: AllProductsInterface) => product.id === newValue.id
      );

      if (index !== -1) {
        // Create a new array without the product at the found index
        const newArray = [
          ...prevState.slice(0, index),
          ...prevState.slice(index + 1),
        ];
        return newArray;
      }

      // If the product is not found, return the previous state as is
      return prevState;
    });

    if (allProducts.length === 1) {
      setCheck(true);
    }
  };

  return (
    <html lang="en">
      <body className={inter.className}>
        <AllContext.Provider
          value={{
            isLightTheme,
            toggleTheme,
            allProducts,
            increaseCartValue,
            decreaseCartValue,
            deleteCartValue,
          }}
        >
          {children}
        </AllContext.Provider>
      </body>
    </html>
  );
}
